@use 'sass:color';
@use 'variables' as *;

// Flexbox
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Grid
@mixin grid($columns: 1, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint ==sm {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  }

  @else if $breakpoint ==md {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  }

  @else if $breakpoint ==lg {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  }

  @else if $breakpoint ==xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  }

  @else if $breakpoint ==sm-down {
    @media (max-width: $breakpoint-sm - 1) {
      @content;
    }
  }

  @else if $breakpoint ==md-down {
    @media (max-width: $breakpoint-md - 1) {
      @content;
    }
  }

  @else if $breakpoint ==lg-down {
    @media (max-width: $breakpoint-lg - 1) {
      @content;
    }
  }

  @else if $breakpoint ==xl-down {
    @media (max-width: $breakpoint-xl - 1) {
      @content;
    }
  }
}

// Truncate text
@mixin truncate($lines: 1) {
  @if $lines ==1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }

  >* {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// Box shadow
@mixin shadow($level: 1) {
  @if $level ==1 {
    box-shadow: $shadow-sm;
  }

  @else if $level ==2 {
    box-shadow: $shadow-md;
  }

  @else if $level ==3 {
    box-shadow: $shadow-lg;
  }

  @else if $level ==4 {
    box-shadow: $shadow-xl;
  }
}

// Transition
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

// Hover effect
@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

// Focus visible
@mixin focus-visible {
  &:focus-visible {
    outline: 2px solid $primary;
    outline-offset: 2px;
    @content;
  }
}

// Responsive font size
@mixin responsive-font($min-size, $max-size, $min-width: $breakpoint-sm, $max-width: $breakpoint-xl) {
  font-size: $min-size;

  @media (min-width: $min-width) {
    font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
  }

  @media (min-width: $max-width) {
    font-size: $max-size;
  }
}

// Strip unit
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Responsive container
@mixin container {
  width: 100%;
  padding-right: $spacing-md;
  padding-left: $spacing-md;
  margin-right: auto;
  margin-left: auto;

  @include respond-to(sm) {
    max-width: 540px;
  }

  @include respond-to(md) {
    max-width: 720px;
  }

  @include respond-to(lg) {
    max-width: 960px;
  }

  @include respond-to(xl) {
    max-width: 1140px;
  }
}

// Visually hidden (for accessibility)
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Animation
@mixin animation($name, $duration: 1s, $timing: ease, $iteration: 1, $direction: normal, $fill: none) {
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: $timing;
  animation-iteration-count: $iteration;
  animation-direction: $direction;
  animation-fill-mode: $fill;
}

// Scrollbar styling
@mixin custom-scrollbar($width: 8px, $track-color: $light, $thumb-color: $primary) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: $border-radius-full;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $thumb-color;
    border-radius: $border-radius-full;
    border: 2px solid $track-color;
  }

  &::-webkit-scrollbar-thumb:hover {
    background-color: color.adjust($thumb-color, $lightness: -10%);
  }
}

// Button styles
@mixin button-style($bg-color, $text-color, $hover-bg-color) {
  background-color: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $border-radius-md;
  padding: $spacing-sm $spacing-lg;
  font-weight: 600;
  cursor: pointer;
  transition: $transition-base;

  &:hover {
    background-color: $hover-bg-color;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// Card styles
@mixin card-style {
  background-color: $white;
  border-radius: $border-radius-md;
  box-shadow: $shadow-md;
  transition: $transition-base;
  padding: $spacing-md;
  

  &:hover {
    box-shadow: $shadow-lg;
    transform: translateY(-5px);
  }
}

// Responsive padding
@mixin responsive-padding($property, $sm, $md, $lg, $xl) {
  #{$property}: $sm;

  @include respond-to(md) {
    #{$property}: $md;
  }

  @include respond-to(lg) {
    #{$property}: $lg;
  }

  @include respond-to(xl) {
    #{$property}: $xl;
  }
}

// Alias para retrocompatibilidade â€“ reutiliza o mixin card-style
@mixin card-base {
  @include card-style;
}